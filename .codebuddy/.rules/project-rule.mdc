---
description: 
globs:
alwaysApply: true
---
# 《深渊巢穴》项目规则

## 代码规范

### 命名规范
1. **类名** - 使用PascalCase，如`BioUnit`、`GeneManager`
2. **方法名** - 使用PascalCase，如`CalculateOfflineGains`
3. **变量名** - 使用camelCase，如`geneSequence`、`creepManager`
4. **常量名** - 使用全大写下划线分隔，如`MAX_GENE_COUNT`
5. **私有变量** - 使用下划线前缀，如`_genePool`

### 代码组织
1. **命名空间** - 使用`DeepAbyssHive.核心系统名`格式
2. **文件结构** - 一个类一个文件，文件名与类名一致
3. **目录结构** - 按系统功能划分目录，如`Gene`、`Unit`、`Hive`
4. **引用排序** - 系统命名空间在前，项目命名空间在后，按字母排序

### 注释规范
1. **类注释** - 描述类的功能、责任和使用方法
2. **方法注释** - 描述方法的功能、参数和返回值
3. **复杂逻辑注释** - 对复杂算法和业务逻辑进行详细注释
4. **TODO注释** - 使用`// TODO: 描述`标记待完成的工作

## 开发流程

### 分支管理
1. **主分支** - `main`分支保持稳定，只合并经过测试的功能
2. **开发分支** - `develop`分支用于日常开发
3. **功能分支** - 使用`feature/功能名`格式创建功能分支
4. **修复分支** - 使用`bugfix/问题描述`格式创建修复分支
5. **版本分支** - 使用`release/版本号`格式创建版本分支

### 提交规范
1. **提交信息** - 使用`[系统名] 动作: 详细描述`格式
2. **提交粒度** - 每个提交应专注于单一功能或修复
3. **代码审查** - 所有合并请求必须经过代码审查
4. **测试验证** - 提交前必须通过单元测试和集成测试

### 版本控制
1. **语义化版本** - 使用`主版本.次版本.修订号`格式
2. **版本递增** - 破坏性更改增加主版本，新功能增加次版本，修复增加修订号
3. **版本日志** - 每个版本必须维护详细的更新日志

## 技术规范

### 性能标准
1. **帧率要求** - 移动设备最低30FPS，目标60FPS
2. **内存限制** - 移动设备内存占用不超过500MB
3. **加载时间** - 初始加载不超过15秒，场景切换不超过5秒
4. **网络请求** - 单次请求不超过200ms，失败自动重试

### 兼容性要求
1. **移动平台** - 支持iOS 13+和Android 8.0+
2. **屏幕适配** - 支持16:9、18:9、19.5:9等主流屏幕比例
3. **设备性能** - 适配中低端设备，提供图形质量选项

### 安全规范
1. **数据加密** - 敏感数据使用AES-256加密
2. **通信安全** - 使用HTTPS协议，实现SSL Pinning
3. **防作弊** - 关键游戏逻辑在服务端验证
4. **数据备份** - 定期备份用户数据，提供恢复机制

## 项目管理

### 任务管理
1. **任务粒度** - 单个任务工作量不超过8小时
2. **任务状态** - 使用"待处理"、"进行中"、"待审核"、"已完成"四种状态
3. **任务优先级** - 使用"紧急"、"高"、"中"、"低"四级优先级

### 会议规范
1. **站会** - 每日15分钟，同步进度和阻碍
2. **迭代计划** - 每两周一次，规划下一迭代任务
3. **迭代回顾** - 每两周一次，总结经验教训
4. **技术评审** - 重要功能实现前进行技术方案评审

### 文档管理
1. **设计文档** - 每个系统必须有详细的设计文档
2. **API文档** - 所有接口必须有完整的API文档
3. **测试文档** - 包含测试用例和测试结果
4. **用户手册** - 提供详细的用户操作指南